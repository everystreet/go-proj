// WARNING: This file has automatically been generated on Sat, 11 Dec 2021 12:35:48 UTC.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package cproj

/*
#cgo LDFLAGS: -lproj
#include "proj.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// Context_create function as declared in include/proj.h:376
func Context_create() *PJ_CONTEXT {
	__ret := C.proj_context_create()
	__v := *(**PJ_CONTEXT)(unsafe.Pointer(&__ret))
	return __v
}

// Context_destroy function as declared in include/proj.h:377
func Context_destroy(ctx *PJ_CONTEXT) *PJ_CONTEXT {
	cctx, cctxAllocMap := (*C.PJ_CONTEXT)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.proj_context_destroy(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(**PJ_CONTEXT)(unsafe.Pointer(&__ret))
	return __v
}

// Create function as declared in include/proj.h:556
func Create(ctx *PJ_CONTEXT, definition string) *PJ {
	cctx, cctxAllocMap := (*C.PJ_CONTEXT)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	definition = safeString(definition)
	cdefinition, cdefinitionAllocMap := unpackPCharString(definition)
	__ret := C.proj_create(cctx, cdefinition)
	runtime.KeepAlive(definition)
	runtime.KeepAlive(cdefinitionAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(**PJ)(unsafe.Pointer(&__ret))
	return __v
}

// Create_crs_to_crs_from_pj function as declared in include/proj.h:559
func Create_crs_to_crs_from_pj(ctx *PJ_CONTEXT, source_crs *PJ, target_crs *PJ, area *PJ_AREA, options []string) *PJ {
	cctx, cctxAllocMap := (*C.PJ_CONTEXT)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csource_crs, csource_crsAllocMap := (*C.PJ)(unsafe.Pointer(source_crs)), cgoAllocsUnknown
	ctarget_crs, ctarget_crsAllocMap := (*C.PJ)(unsafe.Pointer(target_crs)), cgoAllocsUnknown
	carea, careaAllocMap := (*C.PJ_AREA)(unsafe.Pointer(area)), cgoAllocsUnknown
	coptions, coptionsAllocMap := unpackArgSString(options)
	__ret := C.proj_create_crs_to_crs_from_pj(cctx, csource_crs, ctarget_crs, carea, coptions)
	packSString(options, coptions)
	runtime.KeepAlive(coptionsAllocMap)
	runtime.KeepAlive(careaAllocMap)
	runtime.KeepAlive(ctarget_crsAllocMap)
	runtime.KeepAlive(csource_crsAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(**PJ)(unsafe.Pointer(&__ret))
	return __v
}

// Normalize_for_visualization function as declared in include/proj.h:565
func Normalize_for_visualization(ctx *PJ_CONTEXT, obj *PJ) *PJ {
	cctx, cctxAllocMap := (*C.PJ_CONTEXT)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, cobjAllocMap := (*C.PJ)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.proj_normalize_for_visualization(cctx, cobj)
	runtime.KeepAlive(cobjAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(**PJ)(unsafe.Pointer(&__ret))
	return __v
}

// Destroy function as declared in include/proj.h:568
func Destroy(P *PJ) *PJ {
	cP, cPAllocMap := (*C.PJ)(unsafe.Pointer(P)), cgoAllocsUnknown
	__ret := C.proj_destroy(cP)
	runtime.KeepAlive(cPAllocMap)
	__v := *(**PJ)(unsafe.Pointer(&__ret))
	return __v
}

// Trans function as declared in include/proj.h:594
func Trans(P *PJ, direction PJ_DIRECTION, coord PJ_COORD) PJ_COORD {
	cP, cPAllocMap := (*C.PJ)(unsafe.Pointer(P)), cgoAllocsUnknown
	cdirection, cdirectionAllocMap := (C.PJ_DIRECTION)(direction), cgoAllocsUnknown
	ccoord, ccoordAllocMap := *(*C.PJ_COORD)(unsafe.Pointer(&coord)), cgoAllocsUnknown
	__ret := C.proj_trans(cP, cdirection, ccoord)
	runtime.KeepAlive(ccoordAllocMap)
	runtime.KeepAlive(cdirectionAllocMap)
	runtime.KeepAlive(cPAllocMap)
	__v := *(*PJ_COORD)(unsafe.Pointer(&__ret))
	return __v
}

// Get_area_of_use function as declared in include/proj.h:1175
func Get_area_of_use(ctx *PJ_CONTEXT, obj *PJ, out_west_lon_degree *float64, out_south_lat_degree *float64, out_east_lon_degree *float64, out_north_lat_degree *float64, out_area_name []string) int32 {
	cctx, cctxAllocMap := (*C.PJ_CONTEXT)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, cobjAllocMap := (*C.PJ)(unsafe.Pointer(obj)), cgoAllocsUnknown
	cout_west_lon_degree, cout_west_lon_degreeAllocMap := (*C.double)(unsafe.Pointer(out_west_lon_degree)), cgoAllocsUnknown
	cout_south_lat_degree, cout_south_lat_degreeAllocMap := (*C.double)(unsafe.Pointer(out_south_lat_degree)), cgoAllocsUnknown
	cout_east_lon_degree, cout_east_lon_degreeAllocMap := (*C.double)(unsafe.Pointer(out_east_lon_degree)), cgoAllocsUnknown
	cout_north_lat_degree, cout_north_lat_degreeAllocMap := (*C.double)(unsafe.Pointer(out_north_lat_degree)), cgoAllocsUnknown
	cout_area_name, cout_area_nameAllocMap := unpackArgSString(out_area_name)
	__ret := C.proj_get_area_of_use(cctx, cobj, cout_west_lon_degree, cout_south_lat_degree, cout_east_lon_degree, cout_north_lat_degree, cout_area_name)
	packSString(out_area_name, cout_area_name)
	runtime.KeepAlive(cout_area_nameAllocMap)
	runtime.KeepAlive(cout_north_lat_degreeAllocMap)
	runtime.KeepAlive(cout_east_lon_degreeAllocMap)
	runtime.KeepAlive(cout_south_lat_degreeAllocMap)
	runtime.KeepAlive(cout_west_lon_degreeAllocMap)
	runtime.KeepAlive(cobjAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}
